#include <iostream.h>
#include <iomanip.h>
#include <stdlib.h>
#include <stdio.h>

#define MAX 10
#define VertexType char
#define Edge int 

typedef struct {

	VertexType DataTable[MAX];

	Edge EdgeTable[MAX][MAX];

	int Vnum;

	int Enum;

}Gragh;

typedef struct Stack{

	int Data[MAX*5];

	int top;

}SStack;

void InitStack(SStack &S)
{
	S.top=0;
}

int GetTop(SStack &S)
{
	return S.Data[S.top-1];
}

void Push(SStack &S ,int V)
{
	S.Data[S.top]=V;

	S.top++;
}

int Pop(SStack &S)
{
	S.top--;

	return S.Data[S.top];
}



void CreateGragh(Gragh &G)
{
	G.Enum=0;

	G.Vnum=0;
}

void InitGragh(Gragh &G ,int n ,int m)
{

	int i ,j ,x, y ,w;

	VertexType V;

	G.Vnum=n;

	G.Enum=m;

	for(i=0;i<=G.Vnum;i++)
	{
		for(j=0;j<=G.Vnum;j++)
		{
			G.EdgeTable[i][j]=0;
		}
	}

	cout<<"初始化图"<<endl;

	for(i=1;i<=n;i++)
	{
		cout<<"输入第"<<i<<"个节点数据"<<endl;			////节点输入  需简化
		cin>>V;
		G.DataTable[i]=V;								//G.DataTable[0]不存放
	}

	cout<<"数据输入结束"<<endl;

	for(i=1;i<=m;i++)
	{
		cout<<"输入第"<<i<<"组起点,终点,权值"<<endl;			////简化
		cin>>x>>y>>w;
		G.EdgeTable[x][y]=w;
	}

	cout<<"图初始化成功"<<endl<<endl;
}

void InsertGragh(Gragh &G)
{
	VertexType V;

	int Oedge ,Iedge ,adjV;

	int i ,w;

	cout<<"插入节点"<<endl<<"输入节点数据,出度,入度"<<endl;

	cin>>V>>Oedge>>Iedge;

	G.Enum=G.Enum+Oedge+Iedge;

	G.Vnum++;

	G.DataTable[G.Vnum]=V;

	for(i=1;i<=Oedge;i++)
	{
		cout<<"输入第"<<i<<"个弧头，权值"<<endl;

		cin>>adjV>>w;

		G.EdgeTable[G.Vnum][adjV]=w;
	}
	for(i=1;i<=Iedge;i++)
	{
		cout<<"输入第"<<i<<"个弧尾，权值"<<endl;

		cin>>adjV>>w;

		G.EdgeTable[adjV][G.Vnum]=w;
	}

	cout<<"插入成功"<<endl<<endl;

}

void visit(Gragh G ,int V)
{
	cout<<G.DataTable[V]<<setw(4);
}

void DFS(Gragh G)
{

	cout<<"DFS图"<<endl;

	int g[MAX];

	int i ,n ,flag;

	for(i=0;i<=G.Vnum;i++)
	{
		g[i]=0;
	}

	SStack S;

	InitStack(S);

	Push(S ,1);

	g[1]=1;

	visit(G ,1);

	while(1)
	{
		n=GetTop(S);

		flag=0;

		for(i=1;i<=G.Vnum;i++)
		{
			flag+=g[i];
		}

		if(flag==G.Vnum)
		{
			break;
		}

		flag=0;

		for(i=1;i<=G.Vnum;i++)
		{
			if((G.EdgeTable[n][i]!=0)&&(g[i]==0))			//寻找下一可走节点
			{
				flag=1;

				visit(G ,i);

				break;
			}
		}

		if(flag==1)
		{
			Push(S ,i);

			g[i]=1;
		}
		else
		{
			Pop(S);
		}


	}

	cout<<endl<<"遍历结束"<<endl;


}



void main ()
{

	Gragh G;

	int n ,m;

	cout<<"输入图的节点个数，弧个数"<<endl;

	cin>>n>>m;

	cout<<endl;

	CreateGragh(G);

	InitGragh(G ,n ,m);

//	InsertGragh(G);

	DFS(G);
	
	cout<<""<<endl;
}
