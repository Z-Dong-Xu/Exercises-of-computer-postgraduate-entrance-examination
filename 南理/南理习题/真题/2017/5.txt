#include <stdio.h>
#include <iostream.h>
#include <iomanip.h>
#include <algorithm>
#include <vector>
#include <math.h>

using namespace std;

typedef struct edge {

	int A;

	int B;

	double dis;

}edge;

typedef struct city
{
	long X;

	long Y;

}city;

bool cmp(edge a ,edge b)
{
	return a.dis<b.dis;
}

int Tree[110];

int fine(int x)
{
	if(Tree[x]==-1)
	{
		return x;
	}
	else
	{
		int temp=fine(Tree[x]);

		Tree[x]=temp;

		return temp;
	}
}

edge Etable[100010];

city Ctable[101];

void main ()
{
	int n ,i ,j ,k;

	double temp ,ans;

	int root1 ,root2;

	scanf("%d",&n);

	for(i=1;i<=n;i++)
	{
		cin>>Ctable[i].X>>Ctable[i].Y;
	}

	for(i=0;i<=n;i++)
	{
		Tree[i]=-1;
	}

	k=0;

	for(i=1;i<=n;i++)
	{
		for(j=i+1;j<=n;j++)
		{
			temp=sqrt(pow(abs(Ctable[i].X-Ctable[j].X) ,2)+pow(abs(Ctable[i].Y-Ctable[j].Y) ,2));

			Etable[k].A=i;

			Etable[k].B=j;

			Etable[k].dis=temp;

			k++;
		}
	}

	sort(Etable ,Etable+k-1 ,cmp);

	ans=0;

	for(i=0;i<k;i++)
	{
		root1=fine(Etable[i].A);

		root2=fine(Etable[i].B);

		if(root1==root2)
		{
			continue;
		}
		else
		{
			ans+=Etable[i].dis;
		
			Tree[root2]=root1;
		}
	}

	printf("%.2f",ans);

	cout<<endl;
}





