#include <stdio.h>
#include <iostream.h>
#include <iomanip.h>
#include <queue>

using namespace std;

#define MAX 11

typedef struct Point{

	int x;

	int y;

	int z;

	int t;

}Point;

int Map[MAX][MAX][MAX];

queue <Point> Q;

void main ()
{
	int n ,i ,j ,k;

	int X ,Y ,Z ,T;

	Point NewP ,temp;;

	scanf("%d",&n);

	while(n>0)
	{

		cin>>X>>Y>>Z>>T;

		for(i=0;i<=X+1;i++)
		{
			for(j=0;j<=Y+1;j++)
			{
				for(k=0;k<=Z+1;k++)
				{
					Map[i][j][k]=1;
				}
			}
		}
		
		while(Q.empty()!=1)
		{
			Q.pop();
		}

		for(i=1;i<=X;i++)
		{
			for(j=1;j<=Y;j++)
			{
				for(k=1;k<=Z;k++)
				{
					cin>>Map[i][j][k];
				}
			}
		}

		NewP.x=1;

		NewP.y=1;

		NewP.z=1;

		NewP.t=0;

		Q.push(NewP);

		Map[NewP.x][NewP.y][NewP.z]=1;

		while(1)
		{

			if(Map[NewP.x][NewP.y][NewP.z+1]==0)
			{
				temp.x=NewP.x;

				temp.y=NewP.y;

				temp.z=NewP.z+1;

				temp.t=NewP.t+1;

				Q.push(temp);

				Map[temp.x][temp.y][temp.z]=1;

				if(temp.x==X&&temp.y==Y&&temp.z==Z)
				{
					break;
				}
			}

			if(Map[NewP.x][NewP.y][NewP.z-1]==0)	
			{
				temp.x=NewP.x;

				temp.y=NewP.y;

				temp.z=NewP.z-1;

				temp.t=NewP.t+1;

				Q.push(temp);

				Map[temp.x][temp.y][temp.z]=1;

				if(temp.x==X&&temp.y==Y&&temp.z==Z)
				{
					break;
				}
			}

			if(Map[NewP.x][NewP.y+1][NewP.z]==0)	
			{
				temp.x=NewP.x;

				temp.y=NewP.y+1;

				temp.z=NewP.z;

				temp.t=NewP.t+1;

				Q.push(temp);

				Map[temp.x][temp.y][temp.z]=1;

				if(temp.x==X&&temp.y==Y&&temp.z==Z)
				{
					break;
				}
			}

			if(Map[NewP.x][NewP.y-1][NewP.z]==0)	
			{
				temp.x=NewP.x;

				temp.y=NewP.y-1;

				temp.z=NewP.z;

				temp.t=NewP.t+1;

				Q.push(temp);

				Map[temp.x][temp.y][temp.z]=1;

				if(temp.x==X&&temp.y==Y&&temp.z==Z)
				{
					break;
				}
			}

			if(Map[NewP.x+1][NewP.y][NewP.z]==0)	
			{
				temp.x=NewP.x+1;

				temp.y=NewP.y;

				temp.z=NewP.z;

				temp.t=NewP.t+1;

				Q.push(temp);

				Map[temp.x][temp.y][temp.z]=1;

				if(temp.x==X&&temp.y==Y&&temp.z==Z)
				{
					break;
				}
			}

			if(Map[NewP.x-1][NewP.y][NewP.z]==0)	
			{
				temp.x=NewP.x-1;

				temp.y=NewP.y;

				temp.z=NewP.z;

				temp.t=NewP.t+1;

				Q.push(temp);

				Map[temp.x][temp.y][temp.z]=1;

				if(temp.x==X&&temp.y==Y&&temp.z==Z)
				{
					break;
				}
			}

			NewP=Q.front();

			Q.pop();
		}

		if(temp.t<=T)
		{
			cout<<temp.t<<endl;
		}
		else
		{
			cout<<-1<<endl;
		}

		n--;
	}
}





/*
		三维迷宫最短路径---广度搜索--------核心，一层一层的遍历，层数即步数
		（1）
			typedef struct Point{

				int x;

				int y;

				int z;

				int t;							记录层数，，必须要有能正确记录层数的变量，一开始就是应为没有正确的记录层数，导致错误

			}Point;


















  */