#include <stdio.h>
#include <iostream.h>
#include <iomanip.h>
#include <vector>

using namespace std;

#define MAX 11

typedef struct Node{

	int next;

	int dis;

	int pay;
}Node;

vector <Node> Table[MAX];

int Dis[MAX];

int Pay[MAX];

int Flag[MAX];

void main ()
{
	int n ,m ,i ,j;

	int a ,b ,d ,p;

	int Start ,Goal ,next;

	int NewP;

	Node temp;

	while(scanf("%d",&n)!=EOF)
	{
		scanf("%d",&m);
		if(n==0&&m==0)
		{
			break;
		}

		for(i=1;i<=n;i++)
		{
			Dis[i]=-1;

			Pay[i]=-1;

			Flag[i]=0;
		}

		for(i=1;i<=m;i++)
		{
			cin>>a>>b>>d>>p;
			
			temp.dis=d;

			temp.pay=p;

			temp.next=b;

			Table[a].push_back(temp);

			temp.next=a;

			Table[b].push_back(temp);
		}
		
		cin>>Start>>Goal;

		NewP=Start;
		Dis[Start]=0;
		Pay[Start]=0;
		Flag[Start]=1;

		for(i=1;i<n;i++)
		{
			for(j=0;j<Table[NewP].size();j++)									////第一大步
			{
				next=Table[NewP][j].next;

				d=Table[NewP][j].dis;

				p=Table[NewP][j].pay;

				if(Flag[next]==1)
				{
					continue;
				}
				if(Dis[next]==-1||Dis[next]>Dis[NewP]+d)
				{
					Dis[next]=Dis[NewP]+d;

					Pay[next]=Pay[NewP]+p;
				}
			
			}
			
			int MinD=65535;

			int MinP=65536;

			for(j=1;j<=n;j++)													////第二大步
			{
				if(Dis[j]==-1)												
				{
					continue;
				}
				if(Flag[j]==0&&Dis[j]<=MinD)
				{
					if(Dis[j]<MinD)
					{
						NewP=j;
						MinD=Dis[j];
						MinP=Pay[j];
					}
					else
					{
						if(Pay[j]<MinP)
						{
							NewP=i;
							MinD=Dis[j];
							MinP=Pay[j];
						}
					}
				}
			}

			Flag[NewP]=1;																	/////  Flag为1，说明此点路径已经确定，不在改动
		}

		cout<<Dis[Goal]<<setw(8)<<Pay[Goal]<<endl;

	}
}




/*
		路径规划-----单源         核心：两大步 一：探索新节点相连的节点，更新他们的距离  二：在更新完的距离里取出符合条件的距离最小的节点为新节点，flag置1，表明其距离不在变动

		（1）for(j=1;j<=n;j++)																注意，体会逻辑，无路和走过的都排除，选择剩余的路径最短的
			{
				if(Dis[j]==-1)												
				{
					continue;
				}
				if(Flag[j]==0&&Dis[j]<=MinD)
				{
					if(Dis[j]<MinD)
					{
						NewP=j;
						MinD=Dis[j];
						MinP=Pay[j];
					}
					else
					{
						if(Pay[j]<MinP)
						{
							NewP=i;
							MinD=Dis[j];
							MinP=Pay[j];
						}
					}
				}
			}









*/