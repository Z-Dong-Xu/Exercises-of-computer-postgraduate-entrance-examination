#include <stdio.h>
#include <iostream.h>
#include <queue>

using namespace std;

int Tree[10];

int root(int x)
{
	if(Tree[x]==-1)
	{
		return x;
	}
	else
	{
		int temp=root(Tree[x]);

		Tree[x]=temp;

		return temp;
	}
}

void main ()
{
	int n ,m ,i ,top ,rear ,root1 ,root2 ,count;

	while(scanf("%d",&n)!=EOF&&n!=0)
	{
		count=0;

		scanf("%d",&m);

		for(i=1;i<=n;i++)
		{
			Tree[i]=-1;
		}

		for(i=1;i<=m;i++)
		{
			cin>>top>>rear;

			root1=root(top);

			root2=root(rear);

			if(root1!=root2)
			{
				Tree[root2]=root1;
			}
		}

		for(i=1;i<=n;i++)
		{

			if(Tree[i]==-1)
			{
				count++;
			}
		}

		cout<<count-1<<endl;

	}
}


/*
	畅通工程
	（1）int root(int x)											递归寻找x的根节点，并且进行路径压缩
		{
			if(Tree[x]==-1)
			{
				return x;
			}
			else
			{
				int temp=root(Tree[x]);

				Tree[x]=temp;

				return temp;
			}
		}

	（2）	root1=root(top);										若两个根不同，则将两个根连起来，合并集合

			root2=root(rear);

			if(root1!=root2)
			{
				Tree[root2]=root1;
			}

*/