#include <stdio.h>
#include <iostream.h>
#include <algorithm>
#include <math.h>

using namespace std;

#define MAX 11
typedef struct point{

	float x;

	float y;

}Point;

typedef struct edge{

	int frist;

	int next;

	float W;
}Edge;

Point Ptable[MAX];

Edge Etable[MAX*MAX/2];

int Tree[MAX];

bool cmp(Edge a , Edge b)
{
	return a.W < b.W;
}

int FineRoot(int x)
{
	if(Tree[x]==-1)
	{
		return x;
	}
	else
	{
		int temp=FineRoot(Tree[x]);

		Tree[x]=temp;

		return temp;
	}
}

void Esort(Edge *frist ,int n)
{
	int i ,j ,Min;
	
	Edge temp;

	for(i=0;i<n;i++)
	{
		Min=i;

		for(j=i+1;j<n;j++)
		{
			if(frist[j].W<frist[Min].W)
			{
				Min=j;
			}
		}

		temp.frist=frist[Min].frist;
		temp.next=frist[Min].next;
		temp.W=frist[Min].W;

		frist[Min].frist=frist[i].frist;
		frist[Min].next=frist[i].next;
		frist[Min].W=frist[i].W;

		frist[i].frist=temp.frist;
		frist[i].next=temp.next;
		frist[i].W=temp.W;

	}
}

void main ()
{
	int n ,i ,j ,k;

	int root1 ,root2;

	float Sum;

	while(scanf("%d",&n)!=EOF)
	{

		Sum=0;

		for(i=1;i<=n;i++)
		{
			Tree[i]=-1;
		}

		for(i=1;i<=n;i++)
		{
			cin>>Ptable[i].x>>Ptable[i].y;
		}
		
		k=1;

		for(i=1;i<=n;i++)
		{
			for(j=i+1;j<=n;j++)
			{
				Etable[k].frist=i;

				Etable[k].next=j;

				Etable[k].W=pow((pow(Ptable[i].x-Ptable[j].x,2)+pow(Ptable[i].y-Ptable[j].y,2)),0.5);

				k++;
			}
		}

		Esort(Etable+1,k-1);

//		sort(Etable+1,Etable+k-1,cmp);							快排库函数这里为啥不管用？

		for(i=1;i<=k-1;i++)
		{
			root1=FineRoot(Etable[i].frist);

			root2=FineRoot(Etable[i].next);

			if(root1!=root2)
			{
				Tree[root2]=root1;

				Sum+=Etable[i].W;
			}
		}

		cout<<Sum<<endl;
	}
}





/*

		多点最短连线			核心：得到有序边
		（1）ypedef struct point{						数据结构--点

				float x;

				float y;

			}Point;

			typedef struct edge{						数据结构--边

				int frist;

				int next;

				float W;
			}Edge;
		
		  （2）Point Ptable[MAX];						储存所有点

				Edge Etable[MAX*MAX/2];					边表     储存所有边，相当于邻接矩阵的压缩矩阵


		（2）		Esort(Etable+1,k-1);					对边表排序

			//		sort(Etable+1,Etable+k-1,cmp);			快排库函数这里为啥不管用？










  */