#include <stdio.h>
#include <iostream.h>
#include <algorithm>
#include <queue>

using namespace std;

#define MAX 101

int Tree[MAX];

typedef struct edge{

	int frist;

	int next;

	int W;
}Edge;

Edge ETable[MAX];

int FineRoot(int x)
{
	if(Tree[x]==-1)
	{
		return x;
	}
	else
	{
		int temp=FineRoot(Tree[x]);

		Tree[x]=temp;

		return temp;
	}
}

bool cmp(Edge a,Edge b)
{
	return a.W<b.W;
}

void main ()
{
	int num ,i ,Sum;

	int root1 ,root2;

	while(scanf("%d",&num)!=EOF&&num!=0)
	{

		Sum=0;

		for(i=1;i<=num;i++)
		{
			Tree[i]=-1;
		}
		
		for(i=1;i<=num*(num-1)/2;i++)
		{
			cin>>ETable[i].frist>>ETable[i].next>>ETable[i].W;
		}

		sort(ETable+1,ETable+num,cmp);

		for(i=1;i<=num;i++)
		{
			root1=FineRoot(ETable[i].frist);

			root2=FineRoot(ETable[i].next);

			if(root1!=root2)
			{
				Tree[root2]=root1;

				Sum+=ETable[i].W;
			}
		}
		
		cout<<Sum<<endl;
	}

}



/*
		多点最短路径-最小生成树    克鲁斯卡尔方法
		（1）typedef struct edge{															定义边结构体

				int frist;

				int next;

				int W;
			}Edge;


		（2）sort(ETable+1,ETable+num,cmp);													对边进行排序，有利于提高效率，不用每次查找最小边

		（3）if(root1!=root2)																去当前不闭合的最短边
			{
				Tree[root2]=root1;

				Sum+=ETable[i].W;
			}









  */