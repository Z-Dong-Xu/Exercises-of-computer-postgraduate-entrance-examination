#include <stdio.h>
#include <iostream.h>
#include <algorithm>
#include <math.h>

using namespace std;

#define MAX 11
typedef struct point{

	float x;

	float y;

}Point;

typedef struct edge{

	int frist;

	int next;

	float W;
}Edge;

Point Ptable[MAX];

Edge Etable[MAX];

int Tree[MAX];

bool cmp(Edge a,Edge b)
{
	return a.W<b.W;
}

int FineRoot(int x)
{
	if(Tree[x]==-1)
	{
		return x;
	}
	else
	{
		int temp=FineRoot(Tree[x]);

		Tree[x]=temp;

		return temp;
	}
}

void main ()
{
	int n ,i ,j ,k;

	int root1 ,root2;

	float Sum;

	while(scanf("%d",&n)!=EOF)
	{

		Sum=0;

		for(i=1;i<=n;i++)
		{
			Tree[i]=-1;
		}

		for(i=1;i<=n;i++)
		{
			cin>>Ptable[i].x>>Ptable[i].y;
		}
		
		k=1;

		for(i=1;i<=n;i++)
		{
			for(j=i+1;j<=n;j++)
			{
				Etable[k].frist=i;

				Etable[k].next=j;

				Etable[k].W=pow((pow(Ptable[i].x-Ptable[j].x,2)+pow(Ptable[i].y-Ptable[j].y,2)),0.5);

				k++;
			}
		}

		sort(Etable+1,Etable+n,cmp);

		for(i=1;i<=k-1;i++)
		{
			root1=FineRoot(Etable[i].frist);

			root2=FineRoot(Etable[i].next);

			if(root1!=root2)
			{
				Tree[root2]=root1;

				Sum+=Etable[i].W;
			}
		}

		cout<<Sum<<endl;
	}
}
